name: Deploy Line Bot to GCE (SSH + rsync)

on:
  push:
    branches: [ main ]
    paths:
      - "**/*.py"
      - "requirements.txt"
      - "uwsgi.ini"
      - "wsgi.py"
      - ".github/workflows/deploy-gce.yml"
  workflow_dispatch:
    inputs:
      do_pip_install:
        description: "部署後在 VM 上執行 pip install -r requirements.txt（使用 venv）"
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      GCE_HOST: ${{ secrets.GCE_HOST }}
      GCE_USER: ${{ secrets.GCE_USER }}
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      SERVICE_NAME: ${{ secrets.SERVICE_NAME }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Verify key fingerprint (from Secrets)
        run: |
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/privkey
          chmod 600 /tmp/privkey
          # 由私鑰導出公鑰，再計算指紋（不會洩漏金鑰本體）
          ssh-keygen -y -f /tmp/privkey | ssh-keygen -lf -

      - name: Prepare SSH
        run: |
          install -m 700 -d ~/.ssh
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$GCE_HOST" >> ~/.ssh/known_hosts

      - name: Smoke test SSH
        run: |
          set -x
          ssh -vvv -o IdentitiesOnly=yes -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "${GCE_USER}@${GCE_HOST}" "whoami && echo \$HOME"
          # 成功才會往下跑
    
      - name: Ensure remote deploy path exists
        run: |
          ssh -o IdentitiesOnly=yes -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "${GCE_USER}@${GCE_HOST}" "mkdir -p '${DEPLOY_PATH}'"
    
      # 先在遠端建立部署目錄，避免 rsync 初次失敗
      - name: Ensure remote deploy path exists
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "${GCE_USER}@${GCE_HOST}" "mkdir -p '${DEPLOY_PATH}'"

      - name: Rsync code to GCE (from repo root)
        run: |
          rsync -avz --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude ".gitignore" \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes" \
            ./ "${GCE_USER}@${GCE_HOST}:${DEPLOY_PATH}/"

      - name: Install dependencies on VM (venv)
        if: ${{ inputs.do_pip_install }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "${GCE_USER}@${GCE_HOST}" << EOF
          set -e
          cd "${DEPLOY_PATH}"
          if [ ! -d venv ]; then
            python3 -m venv venv
          fi
          . venv/bin/activate
          pip install --upgrade pip wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          EOF

      - name: Restart service on VM
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "${GCE_USER}@${GCE_HOST}" << EOF
          set -e
          sudo systemctl restart "${SERVICE_NAME}"
          sleep 1
          sudo systemctl is-active "${SERVICE_NAME}"
          EOF
