name: Deploy Line Bot to GCE (clean & robust)

on:
  push:
    branches: [ main ]
    paths:
      - "**/*.py"
      - "requirements.txt"
      - "uwsgi.ini"
      - "wsgi.py"
      - ".github/workflows/deploy-gce.yml"
  workflow_dispatch:
    inputs:
      do_pip_install:
        description: "部署後在 GCE 的 venv 內執行 pip install -r requirements.txt"
        type: boolean
        required: false
        default: false

concurrency:
  group: deploy-linebot
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      GCE_HOST: ${{ secrets.GCE_HOST }}         # 例：35.xx.xx.xx
      GCE_USER: ${{ secrets.GCE_USER }}         # 例：Amin（大小寫要一致）
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}   # 例：/home/Amin/
      SERVICE_NAME: ${{ secrets.SERVICE_NAME }} # 例：linebot

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare SSH (ed25519; normalize line endings)
        run: |
          set -e
          install -m 700 -d ~/.ssh
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          # 防止 Windows/瀏覽器貼上造成 CRLF
          sed -i 's/\r$//' ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$GCE_HOST" >> ~/.ssh/known_hosts

      # 可保留這步，之後任何金鑰問題一眼看出（不會顯示私鑰內容）
      - name: Verify key fingerprint (from Secrets)
        run: |
          set -e
          ssh-keygen -y -f ~/.ssh/id_ed25519 > /tmp/derived.pub
          echo "Derived pubkey fingerprint (should match VM authorized_keys):"
          ssh-keygen -lf /tmp/derived.pub

      - name: Smoke test SSH
        run: |
          set -x
          ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes \
            "${GCE_USER}@${GCE_HOST}" "whoami && echo \$HOME"

      - name: Ensure rsync is installed on VM
        run: |
          ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes \
            "${GCE_USER}@${GCE_HOST}" 'set -e
            if ! command -v rsync >/dev/null 2>&1; then
              if [ -f /etc/debian_version ] || grep -qi ubuntu /etc/os-release 2>/dev/null; then
                sudo apt-get update -y && sudo apt-get install -y rsync
              elif [ -f /etc/redhat-release ]; then
                (sudo yum install -y rsync || sudo dnf install -y rsync)
              else
                echo "Please install rsync manually on the VM." >&2
                exit 1
              fi
            fi'

      - name: Ensure remote deploy path exists
        run: |
          ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes \
            "${GCE_USER}@${GCE_HOST}" "mkdir -p '${DEPLOY_PATH}'"

      - name: Rsync code to GCE (repo root → DEPLOY_PATH)
        run: |
          rsync -avz --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude ".gitignore" \
            -e "ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes" \
            ./ "${GCE_USER}@${GCE_HOST}:${DEPLOY_PATH}/"

      - name: Install dependencies on VM (venv, optional)
        if: ${{ inputs.do_pip_install }}
        run: |
          ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes \
            "${GCE_USER}@${GCE_HOST}" << 'EOF'
          set -e
          cd "${DEPLOY_PATH}"
          if [ ! -d venv ]; then
            python3 -m venv venv
          fi
          . venv/bin/activate
          pip install --upgrade pip wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          EOF

      - name: Restart service on VM (force TTY)
        run: |
          # -tt：強制分配 TTY，避免某些 sudo/TTY 限制
          ssh -tt -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes \
            "${GCE_USER}@${GCE_HOST}" \
            "set -e; sudo systemctl restart '${SERVICE_NAME}'; sleep 1; sudo systemctl is-active '${SERVICE_NAME}' && echo OK"
